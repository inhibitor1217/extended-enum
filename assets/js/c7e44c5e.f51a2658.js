"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[298],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,f=p["".concat(o,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4889:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),s=["components"],l={sidebar_position:3},o="Matches",u={unversionedId:"extended-features/matches",id:"extended-features/matches",title:"Matches",description:"Equality - is",source:"@site/docs/extended-features/matches.md",sourceDirName:"extended-features",slug:"/extended-features/matches",permalink:"/docs/extended-features/matches",editUrl:"https://github.com/inhibitor1217/extended-enum/docs/extended-features/matches.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Iteration",permalink:"/docs/extended-features/iteration"},next:{title:"Defining additional interfaces",permalink:"/docs/advanced-usages/extend-base"}},c={},m=[{value:"Equality - <code>is</code>",id:"equality---is",level:2},{value:"<code>isNot</code>",id:"isnot",level:3},{value:"Pattern Matching - <code>match</code>",id:"pattern-matching---match",level:2}],p={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"matches"},"Matches"),(0,a.kt)("h2",{id:"equality---is"},"Equality - ",(0,a.kt)("inlineCode",{parentName:"h2"},"is")),(0,a.kt)("p",null,"To determine equality between enum and primitives, keys, or other enums, use ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"is")),","),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"enum _Size { small = 'S', medium = 'M', large = 'L' }\nclass Size extends extend<typeof _Size, _Size>(_Size) {}\n\n// compare with keys\nSize.small.is('small');   // true\nSize.medium.is('small');  // false\nSize.medium.is('medium'); // true\n\n// compare with primitives\nSize.small.is('S');      // true\nSize.large.is('L');      // true\nSize.large.is('M');      // false\nSize.large.is('XS');     // false\nSize.medium.is(_Size.M); // true\n\n// compare with values\nSize.small.is(Size.small); // true\n\nconst size = Size.from('L');\nsize.is(Size.large);       // true\nSize.medium.is(size);      // false\n")),(0,a.kt)("h3",{id:"isnot"},(0,a.kt)("inlineCode",{parentName:"h3"},"isNot")),(0,a.kt)("p",null,"A negation of ",(0,a.kt)("inlineCode",{parentName:"p"},"is"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Size.medium.is('small');    // false\nSize.medium.isNot('small'); // true\n\nSize.small.is('S');         // true\nSize.small.isNot('S');      // false\n")),(0,a.kt)("h2",{id:"pattern-matching---match"},"Pattern Matching - ",(0,a.kt)("inlineCode",{parentName:"h2"},"match")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"match")," provides a utility for pattern matching.")," Specify the mappings as you please (defining patterns with keys, values, primitive values are all supported). ",(0,a.kt)("inlineCode",{parentName:"p"},"match")," will search for the pattern and return the desired mapping."),(0,a.kt)("p",null,"If the value fails to match all the given patterns, ",(0,a.kt)("inlineCode",{parentName:"p"},"match")," will return ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined"),". Otherwise, provide a fallback value as a second parameter."),(0,a.kt)("p",null,"Mapping multiple patterns to single value is also supported (see the last example)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const size = Size.from('L');\n\n// define pattern by keys\nsize.match({\n  small:  200,\n  medium: 250,\n  large:  300,\n}); // 300\n\nsize.match({ small: false });       // undefined\nsize.match({ small: false }, true); // true (fallback case)\n\n// define pattern by primitives\nsize.match({ S: 200, M: 250, L: 300 }); // 300\n\n// define using tuples\nsize.match([\n  [Size.small,  200],\n  [Size.medium, 250],\n  [Size.large,  300],\n]); // 300\n\nsize.match([\n  [Size.small, false],\n  [[Size.medium, Size.large], true],\n]); // true\n")))}d.isMDXComponent=!0}}]);